What happens when you initialize a repository? Why do you need to do it?

	When I initialize a repo, it gives that working directory git version control capabilities for all the files contained in there/will be contained in there (well, not if the files are untracked; to have those files get tracked I have to use "git add"). I need it for git version control capabilities.

	Good to note:

	If you accidentally add a file to the staging area, you can remove it using git reset. For example, if you accidentally add lesson_2_reflections.txt, but donâ€™t want it to be committed yet, run git reset lesson_2_reflections.txt and the file will be removed from the staging area, but it will still be in your working directory.

	The woman says I should do one commit per logical change, and she's not wrong. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is different from the working directory in that this is what I am setting up to be tracked and followed by git. The working directory could have many untracked files, and git won't care about those unless I add them to the staging area. The repository is where the things from the staging area go to. The repository is separate from the working directory. In a sense, you're kind of splitting up your working directory and putting into the repository only the files you want to be tracked by git. This offers a ton of value and flexibility, so that you can keep personal things for testing separate from whatever shared repository you have with others on a team. Omg, this is a very simple and nice concept. Normally, when I shared a VM instance with Steve, I could see his random files laid about that read "text.py" or something like that. I;ve also done the same. This is totally fine when there's two of us. But if we were working on a huge project with tons of other people, and these random little test files showed up all over, it would make the directory we're all working in look cluttered, and it could possibly confuse the others as they'd want to know the purpose of these random files.

How can you use the staging area to make sure you have one commit per logical change?

	I can use the staging area to make sure I have one logical change by checking out git diff --staged. This will show me the difference between what I have ready to be committed and what I already have committed. From that diff, I can check out if my logical change is logical. I can use git diff without anything after to see the difference between my working directory and the staging area. This is helpful because It can show me if I made any weird changes. Also, onel logical change per commit makes it very easy to check over your own work before you commit it to make sure you haven't made any mistakes that were unintentional.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches are super useful when you're trying to do a big change and play around with everything without jeopardizing everything that's already been created. It keeps your history organized because it shows all the logical changes of what you've been up to. Branches help because they just show you what you or other were trying at different points in time.

How do the diagrams help you visualize the branch structure?

	Diagrams help you visualize the branch structure because it is a literal representation of the branch structure. But it's very good to have so that you can see what kind of tree you are running in your project. You can tell if people are doing weird things on git and you could have your company develop different types of git philosophies while working on a project. Some companies may be fine with having huge huge sprawling branches, while others would like for everything to merge back into master while keeping the whole line looking as clear and linear as possible. This I believe is best for large sprawling projects, where the master branch is simply what is given to the end user.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result (if no conflicts exist) is that all the logical changes that were made were then reincorporated. So I got the functionality of all the things I did on master available to me with the coin function. The diagram is represented in the branch diagram way because it's a good and accurate representation of what happened.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	The pros and cons of Git's automatic merging are as follows:

		Pros: It's very fast and efficient in putting together all the changes that, as far as you know, would work with the code you want to add.

		Cons: Sometimes, new code could be introduced that brings a bug over to your code, or new code you'd necessarily wouldn't want from someone else comes to your code. There could perhaps be some unforseen consequences when mixing your code with someone elses, however that's a very light con for the quick ease.

	Pros and cons of manually merging:

		Pros: You get to keep track and better understand what the other person was doing and you can then come up with a fine compromise with the code

		Cons: It could be very tedious sometimes to come up with such a compromise, and at the end of the day you and the other person will have to redo all your work in order to get on the same page in the worst situations.

































